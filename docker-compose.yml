services:

  migrator:
    build: migrator/
    container_name: migrator

    volumes:
      - ./migrations:/migrations

    command: migrate -database ${DATABASE_URI} -path /migrations up

    depends_on:
      db:
        condition: service_healthy
        restart: true

  db:
    image: postgres
    restart: always

    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${PSQL_PWD}
      POSTGRES_DB: ${POSTGRES_DB}

    # TODO remove
    ports:
      - 5432:5432

    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 3


  items:
    build: api/items
    restart: always
    environment: 
      DATABASE_URI: ${DATABASE_URI}
    container_name: items

    depends_on:
      db:
        condition: service_healthy
        restart: true

  orders:
    build: api/orders
    restart: always
    environment: 
      DATABASE_URI: ${DATABASE_URI}
      KAFKA_URL: ${KAFKA_URL}
    container_name: orders

    depends_on:
      db:
        condition: service_healthy
        restart: true
      kafka:
        condition: service_healthy
        restart: true
      

  kafka:
    container_name: kafka
    image: 'bitnami/kafka:latest'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://${LOCACL_IP}:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    ports:
      - 9094:9094

    healthcheck:
      test: ["CMD-SHELL", "echo 'test-message' | kafka-console-producer.sh --broker-list localhost:9092 --topic health-check-topic && kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic health-check-topic --from-beginning --max-messages 1 | grep 'test-message'"]
      interval: 10s
      timeout: 50s
      retries: 5

  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      kafka:
        condition: service_healthy

    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      kafka-topics --bootstrap-server kafka:9092 --delete --topic health-check-topic
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic new-order --replication-factor 1 --partitions 1
      "

  web:
    image: nginx
    volumes:
    - ./nginx:/etc/nginx/templates
    ports:
    - "80:80"
    command: [nginx-debug, '-g', 'daemon off;']
    environment:
    - NGINX_PORT=80
    - ITEMS_ADDR=items:8081
    - ORDERS_ADDR=orders:8082
    depends_on:
      - items
      - orders
